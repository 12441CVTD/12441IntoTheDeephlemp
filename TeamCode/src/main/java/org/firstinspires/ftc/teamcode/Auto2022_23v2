package org.firstinspires.ftc.teamcode;

import static com.qualcomm.robotcore.hardware.DcMotor.RunMode.RUN_TO_POSITION;
import static com.qualcomm.robotcore.hardware.DcMotor.RunMode.STOP_AND_RESET_ENCODER;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;

import java.util.List;

@Autonomous(name = "Auto 2022", group = "Linear Opmode")
//@Disabled

public class Auto2022_23v2 extends LinearOpMode {

    /*
     * Specify the source for the Tensor Flow Model.
     * If the TensorFlowLite object model is i--ncluded in the Robot Controller App as an "asset",
     * the OpMode must to load it using loadModelFromAsset().  However, if a team generated model
     * has been downloaded to the Robot Controller's SD FLASH memory, it must to be loaded using loadModelFromFile()
     * Here we assume it's an Asset.    Also see method initTfod() below .
     */
    //private static final String TFOD_MODEL_ASSET = "PowerPlay.tflite";
    private static final String TFOD_MODEL_FILE  = "/sdcard/FIRST/tflitemodels/team3666.tflite";

    private static final String[] LABELS = {
            "1 Bolt",
            "2 Bulb",
            "3 Panel"
    };

    public DcMotorEx leftDrive;
    public DcMotorEx rightDrive;
    public DcMotorEx leftBackDrive;
    public DcMotorEx rightBackDrive;

    public DcMotorEx liftMotor;
    public Servo servoGrabber1;
    public Servo servoGrabber2;

    // Sensor built into control hub
    BNO055IMU imu;

    public ElapsedTime runtime = new ElapsedTime();

    public double off = 0.0;
    public double corrections = 1.0;

    public boolean hasMoved = false;

    // Linear slide information
    public double liftCorrection = 1;

    public double tickPerInchForLift = 173 * liftCorrection;

    final double MIN_LIFT_POS = 0;
    final double MAX_LIFT_POS = tickPerInchForLift * 35;

    // Servo information
    static final double MAX_POS     =    .52;
    static final double MAX_POS2    =    .48;
    static final double MIN_POS     =     1;
    static final double MIN_POS2    =     0;

    public double servoDirection = 0;
    public double position = 1;
    public double position2 = 0;

    // Wheel constants
    public double ticksPerRotation = 537.6; // For AndyMark NeveRest 20
    public double rpm = 340;
    public double maxVelocity = rpm * ticksPerRotation;
    public double diameter = 10; //cm

    // Cone information

    public int coneCount = 1;
    public double firstConePos = 4.62;
    public double coneSeparationDistance = firstConePos/4;

    // Image information
    public double center = 0;
    public double leftCenter = 0;
    public double rightCenter = 0;

    // General constants
    double oneFootCm = 30.48;

    // Variables for turning
    private double          robotHeading  = 0;
    private double          headingOffset = 0;
    private double          headingError  = 0;
    private double  targetHeading = 0;
    private double  driveSpeed    = 0;
    private double  turnSpeed     = 0;
    private double  leftSpeed     = 0;
    private double  rightSpeed    = 0;
    private int     leftTarget    = 0;
    private int     rightTarget   = 0;
    static final double     P_TURN_GAIN            = 0.02;     // Larger is more responsive, but also less stable
    static final double     P_DRIVE_GAIN           = 0.03;     // Larger is more responsive, but also less stable
    static final double     DRIVE_SPEED             = 0.4;     // Max driving speed for better distance accuracy.
    static final double     TURN_SPEED              = 0.2;     // Max Turn speed to limit turn rate
    static final double     HEADING_THRESHOLD       = 4.0 ;
    static final double     COUNTS_PER_MOTOR_REV    = 537.6 ;   // eg: GoBILDA 312 RPM Yellow Jacket
    static final double     DRIVE_GEAR_REDUCTION    = 2.0 ;     // No External Gearing.
    static final double     WHEEL_DIAMETER_INCHES   = 3.93701 ;     // For figuring circumference
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);

    private static final String VUFORIA_KEY =
            "AclDUAH/////AAABmYzSWAdyDktyn7LeKaYpXPkeHMDuWfVt+ZWKtbsATYUHu+lKEe6ywQGLZLm5MRmxfQ4UQRSZ8hR7Hx7cwiYcj7DBcqr2CcI/KXvXFnaoaSHonQcH5UjgGwygyR0DRMvRI9Mm+MnWqdwgQuS4eNYgz/vAuNpeGRJmwimGZkb9kb9Uai+RaH2V33PvH4TZepOg//RReZrL33oLxaLEchTHATEKR1xj6NLzHuZVuOTnIaMwPHRrkkK/cyMqaog/be+k2uxxQ2Lxtb2Yb4nHt4n8Rs7ajT/dUSsP/6pZdWmVs7BmIafbHlLFlS/6+1rDbSfOHqEyHFoLDq/hselgdVG2pzEzPcr3ntMwoIAPjiA799i5";
    private VuforiaLocalizer vuforia;
    private TFObjectDetector tfod;

    @Override
    public void runOpMode() {
        initVuforia();
        initTfod();
        setUpHardware();

        if (tfod != null) {
            tfod.activate();
            tfod.setZoom(1.0, 16.0/9.0);
        }

        telemetry.addData(">", "Press Play to start op mode");
        telemetry.update();

        waitForStart();
        runtime.reset();

        if (opModeIsActive()) {
            while (opModeIsActive()) {
                /*if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        telemetry.addData("# Objects Detected", updatedRecognitions.size());

                        // step through the list of recognitions and display image position/size information for each one
                        // Note: "Image number" refers to the randomized image orientation/number
                        for (Recognition recognition : updatedRecognitions) {
                            double col = (recognition.getLeft() + recognition.getRight()) / 2;
                            double row = (recognition.getTop() + recognition.getBottom()) / 2;
                            double width = Math.abs(recognition.getRight() - recognition.getLeft());
                            double height = Math.abs(recognition.getTop() - recognition.getBottom());

                            telemetry.addData("", " ");
                            telemetry.addData("Image", "%s (%.0f %% Conf.)", recognition.getLabel(), recognition.getConfidence() * 100);
                            telemetry.addData("- Position (Row/Col)", "%.0f / %.0f", row, col);
                            telemetry.addData("- Size (Width/Height)", "%.0f / %.0f", width, height);
                        }
                        telemetry.update();
                        if (updatedRecognitions.size() > 0 && !hasMoved) {
                            moveToZone(updatedRecognitions.get(0).getLabel());
                            hasMoved = true;
                        }
                    }
                }*/

                if(!hasMoved){
                    movePercentOfFoot(true,30.0/12);
                    hasMoved = true;
                }

                /* Use the code below to test ticks per inch
                 * Uncomment and run, then find how high the linear slide moved.
                 * 173 ticks as of writing this is the amount needed to lift up one inch.
                 * Change the liftCorrection variable to account for the difference in distance
                 * For example: After running the code, the linear slide moved 1.3 inches.
                 * Change liftCorrection to .7. This accounts for it being .3 inches over since
                 * you're taking .3 inches off of the current one inch
                 */

                /*
                if(!hasMoved){
                    liftMotor.setMode(STOP_AND_RESET_ENCODER);
                    liftMotor.setTargetPosition(173);
                    liftMotor.setMode(RUN_TO_POSITION);
                    liftMotor.setPower(1.0);
                    hasMoved = true;
                }
                 */
            }
        }
    }

    public void moveToZone(String signal){
        telemetry.addData("Detected:",signal);
        if(signal.equals("1 Bolt")){ // go to location 1 (left and forward)
            movePercentOfFoot(true,30.0/12);
            turnNinety(false);
            movePercentOfFoot(true,21.0/12);
        }

        if(signal.equals("2 Bulb")){ // go to location 2 (return to start and forward)
            movePercentOfFoot(true,30.0/12);
        }

        if(signal.equals("3 Panel")){ // go to location 3 (right and forward)
            movePercentOfFoot(true,30.0/12);
            turnNinety(true);
            movePercentOfFoot(true,23.0/12);
        }
    }


    public void setUpHardware() { // Assigns motor names in phone to the objects in code
        leftDrive  = hardwareMap.get(DcMotorEx.class, "left_front_drive");
        leftBackDrive  = hardwareMap.get(DcMotorEx.class, "left_back_drive");
        rightDrive = hardwareMap.get(DcMotorEx.class, "right_front_drive");
        rightBackDrive = hardwareMap.get(DcMotorEx.class, "right_back_drive");

        liftMotor  = hardwareMap.get(DcMotorEx.class, "lift_motor");
        servoGrabber1 = hardwareMap.get(Servo.class, "servo_grabber_one");
        servoGrabber2 = hardwareMap.get(Servo.class, "servo_grabber_two");

        // Makes all motors go forward, if they don't, switch the direction
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);

        leftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftBackDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightBackDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        liftMotor.setDirection(DcMotor.Direction.FORWARD);

        liftMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        servoGrabber1.setPosition(position);
        servoGrabber2.setPosition(position2);

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        // Technically this is the default, however specifying it is clearer
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        // Without this, data retrieving from the IMU throws an exception
        imu.initialize(parameters);

        liftMotor.setMode(STOP_AND_RESET_ENCODER); // Set to 0 just in case
    }

    /**
     * Initialize the Vuforia localization engine.
     */
    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraName = hardwareMap.get(WebcamName.class, "Webcam 1");

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);
    }

    /**
     * Initialize the TensorFlow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.75f;
        tfodParameters.isModelTensorFlow2 = true;
        tfodParameters.inputSize = 300;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);

        // Use loadModelFromAsset() if the TF Model is built in as an asset by Android Studio
        // Use loadModelFromFile() if you have downloaded a custom team model to the Robot Controller's FLASH.
        //tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABELS);
        tfod.loadModelFromFile(TFOD_MODEL_FILE, LABELS);
    }

    //Drive functions
    public void setVelo(boolean forward, double maxPercent, double time){ // Move forward or backward
        int direction = -1;
        if(forward){
            direction = 1;
        }
        runtime.reset();
        while(opModeIsActive() && runtime.seconds() < time){
            leftVelo(maxPercent*direction);
            rightVelo(maxPercent*direction);
        }
        if(runtime.seconds() >= time){
            motorsOff();
        }
    }

    public void strafeVelo(boolean isLeft, double maxPercent, double time){
        //Strafe left or right
        int direction = -1;
        if(isLeft){
            direction = 1;
        }
        runtime.reset();
        while(opModeIsActive() && runtime.seconds() < time){
            leftWheel(maxPercent * direction);
            rightWheel(maxPercent * direction * -1);
            leftBackWheel(maxPercent * direction * -1);
            rightBackWheel(maxPercent * direction);
        }
        if(runtime.seconds() >= time){
            motorsOff();
        }
    }

    public void turnNinety(boolean CW){
        // Turns 90 degrees either clockwise or counter clockwise, depending on value of CW
        double originalAngle = -imu.getAngularOrientation().firstAngle;

        double time = .8;
        runtime.reset();

        /*if(CW){
            while(opModeIsActive() && runtime.seconds() < time){
                leftVelo(.75);
                rightVelo(-.75);
            }
        }else{
            while(opModeIsActive() && runtime.seconds() < time){
                leftVelo(-.75);
                rightVelo(.75);
            }
        }
        if(time >= runtime.seconds()){
            motorsOff();
        }*/

        if(CW) {
            //left = +; right = -
            if(originalAngle - .9 < 0) {
                while (opModeIsActive() && (-imu.getAngularOrientation().firstAngle < originalAngle + .05 || -imu.getAngularOrientation().firstAngle > originalAngle - .9 + 3.6)) {
                    leftVelo(.75);
                    rightVelo(-.75);
                }
            }else{
                while (opModeIsActive() && -imu.getAngularOrientation().firstAngle > originalAngle - .9 && -imu.getAngularOrientation().firstAngle < originalAngle + .05) {
                    leftVelo(.75);
                    rightVelo(-.75);
                }
            }
        }else{
            //left = -; right = +
            if(originalAngle + .9 > 3.6) {
                while (opModeIsActive() && (-imu.getAngularOrientation().firstAngle > originalAngle - .05 || -imu.getAngularOrientation().firstAngle < originalAngle + .9 - 3.6)) {
                    leftVelo(-.75);
                    rightVelo(.75);
                }
            }else{
                while (opModeIsActive() && -imu.getAngularOrientation().firstAngle < originalAngle + .9 && -imu.getAngularOrientation().firstAngle > originalAngle - .05) {
                    leftVelo(-.75);
                    rightVelo(.75);
                }
            }
        }
        motorsOff();
    }

    public void movePercentOfFoot(boolean forward, double feetAmount){
        //using motor encoders
        double driveTrainCorrection = 1;

        double oneRotationDistance = diameter * Math.PI; // In cm
        double rotationAmount = oneFootCm / oneRotationDistance;
        double totalTicks = rotationAmount * ticksPerRotation * feetAmount * 2 * driveTrainCorrection; // *2 is to account for gear ratio

        resetEncoders();

        if(forward){
            motorsOn(.75);
            while(opModeIsActive() && leftBackDrive.getCurrentPosition() < totalTicks){
                telemetry.addData("Encoder Value:", leftBackDrive.getCurrentPosition());
                telemetry.update();
            }
        }else{
            totalTicks = -totalTicks;
            motorsOn(-.75);
            while(opModeIsActive() && leftBackDrive.getCurrentPosition() > totalTicks){
                telemetry.addData("Encoder Value:", leftBackDrive.getCurrentPosition());
                telemetry.update();
            }
        }
        motorsOff();
        resetEncoders();
    }

    public void pickupCone(){
        double conePosMod = coneCount * coneSeparationDistance;
        moveLift(firstConePos - conePosMod);
        moveGrabber(true);
        waitTime(1);
        moveLift(firstConePos - conePosMod + 5);
        coneCount++;
    }

    public void moveLift(double toHeight){
        if(opModeIsActive()){
            int targetTick = (int) (tickPerInchForLift * toHeight);

            // Initial movement to get as close as possible
            liftMotor.setTargetPosition(targetTick);
            liftMotor.setMode(RUN_TO_POSITION);
            liftMotor.setPower(1.0);

            while(opModeIsActive() && liftMotor.isBusy()){
                telemetry.addData("Lift Encoder Value:",liftMotor.getCurrentPosition());
                telemetry.update();
            }
            liftMotor.setPower(0);

            // Secondary movement to get to correct value using lower power
            liftMotor.setTargetPosition(targetTick);
            liftMotor.setMode(RUN_TO_POSITION);
            liftMotor.setPower(.25);

            while(opModeIsActive() && liftMotor.isBusy()){
                telemetry.addData("Lift Encoder Value:",liftMotor.getCurrentPosition());
                telemetry.update();
            }
            liftMotor.setPower(0);
        }
    }

    public void moveGrabber(boolean closed){
        if(closed){
            servoGrabber1.setPosition(MAX_POS);
            servoGrabber2.setPosition(MAX_POS2);
        }else{
            servoGrabber1.setPosition(MIN_POS);
            servoGrabber2.setPosition(MIN_POS2);
        }
    }

    public void leftVelo(double maxPercent){ //sets power for left wheels
        leftWheel(maxPercent);
        leftBackWheel(maxPercent);
    }

    public void rightVelo(double maxPercent){ //sets power for right wheels
        rightWheel(maxPercent);
        rightBackWheel(maxPercent);
    }

    public void leftWheel(double percent){
        leftDrive.setPower(percent);
    }
    public void rightWheel(double percent){
        rightDrive.setPower(percent);
    }
    public void leftBackWheel(double percent){
        leftBackDrive.setPower(percent);
    }
    public void rightBackWheel(double percent){
        rightBackDrive.setPower(percent);
    }


    //Primitive functions

    public void waitTime(double time){ // Waits for time (seconds)
        runtime.reset();
        while(opModeIsActive() && runtime.seconds()<time){
        }
    }

    public void motorsOff(){ // Turns all motors off
        leftDrive.setPower(0);
        leftBackDrive.setPower(0);
        rightDrive.setPower(0);
        rightBackDrive.setPower(0);
    }

    public void motorsOn(double powerPercent){
        leftDrive.setPower(powerPercent);
        leftBackDrive.setPower(powerPercent);
        rightDrive.setPower(powerPercent);
        rightBackDrive.setPower(powerPercent);
    }

    public void resetEncoders() { // Reset all encoder positions
        leftDrive.setMode(STOP_AND_RESET_ENCODER);
        leftBackDrive.setMode(STOP_AND_RESET_ENCODER);
        rightDrive.setMode(STOP_AND_RESET_ENCODER);
        rightBackDrive.setMode(STOP_AND_RESET_ENCODER);

        leftDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    }

    public void encoderTarget(int target){
        leftDrive.setTargetPosition(target);
        leftBackDrive.setTargetPosition(target);
        rightDrive.setTargetPosition(target);
        rightBackDrive.setTargetPosition(target);
    }

    // Some physics equations put into functions
    public static double getVelo(double radius, double rpm){ // in m/s in theory; v = vangular * r
        return ((rpm/60)*Math.PI)*radius;
    }

    public static double getDistance(double radius, double rpm, double time){ //whatever unit radius is in; x = vt
        return getVelo(radius,rpm)*time;
    }

    public void turnToHeading(double maxTurnSpeed, double heading) {

        // Run getSteeringCorrection() once to pre-calculate the current error
        getSteeringCorrection(heading, P_DRIVE_GAIN);

        // keep looping while we are still active, and not on heading.
        while (opModeIsActive() && (Math.abs(headingError) > HEADING_THRESHOLD)) {

            // Determine required steering to keep on heading
            turnSpeed = getSteeringCorrection(heading, P_TURN_GAIN);

            // Clip the speed to the maximum permitted value.
            turnSpeed = Range.clip(turnSpeed, -maxTurnSpeed, maxTurnSpeed);

            // Pivot in place by applying the turning correction
            moveRobot(0, turnSpeed);

            // Display drive status for the driver.
            sendTelemetry(false);
        }

        // Stop all motion;
        moveRobot(0, 0);
    }

    public double getSteeringCorrection(double desiredHeading, double proportionalGain) {
        targetHeading = desiredHeading;  // Save for telemetry

        // Get the robot heading by applying an offset to the IMU heading
        robotHeading = getRawHeading() - headingOffset;

        // Determine the heading current error
        headingError = targetHeading - robotHeading;

        // Normalize the error to be within +/- 180 degrees
        while (headingError > 180)  headingError -= 360;
        while (headingError <= -180) headingError += 360;

        // Multiply the error by the gain to determine the required steering correction/  Limit the result to +/- 1.0
        return Range.clip(headingError * proportionalGain, -1, 1);
    }

    public void moveRobot(double drive, double turn) {
        driveSpeed = drive;     // save this value as a class member so it can be used by telemetry.
        turnSpeed  = turn;      // save this value as a class member so it can be used by telemetry.

        leftSpeed  = drive - turn;
        rightSpeed = drive + turn;

        // Scale speeds down if either one exceeds +/- 1.0;
        double max = Math.max(Math.abs(leftSpeed), Math.abs(rightSpeed));
        if (max > 1.0)
        {
            leftSpeed /= max;
            rightSpeed /= max;
        }

        leftDrive.setPower(leftSpeed);
        leftBackDrive.setPower(leftSpeed);
        rightDrive.setPower(rightSpeed);
        rightBackDrive.setPower(rightSpeed);
    }

    private void sendTelemetry(boolean straight) {

        if (straight) {
            telemetry.addData("Motion", "Drive Straight");
            telemetry.addData("Target Pos L:R",  "%7d:%7d",      leftTarget,  rightTarget);
            telemetry.addData("Actual Pos L:R",  "%7d:%7d",      leftDrive.getCurrentPosition(),
                    rightDrive.getCurrentPosition());
        } else {
            telemetry.addData("Motion", "Turning");
        }

        telemetry.addData("Angle Target:Current", "%5.2f:%5.0f", targetHeading, robotHeading);
        telemetry.addData("Error:Steer",  "%5.1f:%5.1f", headingError, turnSpeed);
        telemetry.addData("Wheel Speeds L:R.", "%5.2f : %5.2f", leftSpeed, rightSpeed);
        telemetry.update();
    }

    public double getRawHeading() {
        Orientation angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        return angles.firstAngle;
    }

    public void resetHeading() {
        // Save a new heading offset equal to the current raw heading.
        headingOffset = getRawHeading();
        robotHeading = 0;
    }
}