package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import java.lang.Math.*;

@Autonomous(name = "Auto 2022", group = "Linear Opmode")
//@Disabled

public class Auto2022_23v2 extends LinearOpMode { //same as AutoReadSignalMoveZone just without a bunch of old functions to make it easier to read

    /*
     * Specify the source for the Tensor Flow Model.
     * If the TensorFlowLite object model is i--ncluded in the Robot Controller App as an "asset",
     * the OpMode must to load it using loadModelFromAsset().  However, if a team generated model
     * has been downloaded to the Robot Controller's SD FLASH memory, it must to be loaded using loadModelFromFile()
     * Here we assume it's an Asset.    Also see method initTfod() below .
     */
    private static final String TFOD_MODEL_ASSET = "PowerPlay.tflite";
    //private static final String TFOD_MODEL_FILE  = "/sdcard/FIRST/tflitemodels/CustomTeamModel.tflite";

    private static final String[] LABELS = {
            "1 Bolt",
            "2 Bulb",
            "3 Panel"
    };

    //general constants
    double oneFootCm = 30.48;

    //drivetrain
    public DcMotorEx leftDrive;
    public DcMotorEx rightDrive;
    public DcMotorEx leftBackDrive;
    public DcMotorEx rightBackDrive;

    public ElapsedTime runtime = new ElapsedTime();

    public double off = 0.0;
    public double corrections = 1.0;
    public int count = 0;

    public boolean hasMoved = false;

    //Wheel constants
    public double maxVelocity = 340 * 537.6; //for AndyMark NeveRest 20 motor when using .setVelocity()
    public double rpm = 340;
    public double radius = 10; //cm
    public double oneFootTime = oneFootCm/(getVelo(radius,rpm)*.75); //using a velo of maxVelocity * .75; change the distance unit depending on radius units

    private static final String VUFORIA_KEY =
            "AclDUAH/////AAABmYzSWAdyDktyn7LeKaYpXPkeHMDuWfVt+ZWKtbsATYUHu+lKEe6ywQGLZLm5MRmxfQ4UQRSZ8hR7Hx7cwiYcj7DBcqr2CcI/KXvXFnaoaSHonQcH5UjgGwygyR0DRMvRI9Mm+MnWqdwgQuS4eNYgz/vAuNpeGRJmwimGZkb9kb9Uai+RaH2V33PvH4TZepOg//RReZrL33oLxaLEchTHATEKR1xj6NLzHuZVuOTnIaMwPHRrkkK/cyMqaog/be+k2uxxQ2Lxtb2Yb4nHt4n8Rs7ajT/dUSsP/6pZdWmVs7BmIafbHlLFlS/6+1rDbSfOHqEyHFoLDq/hselgdVG2pzEzPcr3ntMwoIAPjiA799i5";
    private VuforiaLocalizer vuforia;
    private TFObjectDetector tfod;

    @Override
    public void runOpMode() {
        initVuforia();
        initTfod();
        setUpHardware();

        if (tfod != null) {
            tfod.activate();
            tfod.setZoom(1.0, 16.0/9.0);
        }

        telemetry.addData(">", "Press Play to start op mode");
        telemetry.update();

        waitForStart();
        runtime.reset();

        if (opModeIsActive()) {
            while (opModeIsActive()) {
                if (tfod != null) {
                    // getUpdatedRecognitions() will return null if no new information is available since
                    // the last time that call was made.
                    List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                    if (updatedRecognitions != null) {
                        telemetry.addData("# Objects Detected", updatedRecognitions.size());

                        // step through the list of recognitions and display image position/size information for each one
                        // Note: "Image number" refers to the randomized image orientation/number
                        for (Recognition recognition : updatedRecognitions) {
                            double col = (recognition.getLeft() + recognition.getRight()) / 2;
                            double row = (recognition.getTop() + recognition.getBottom()) / 2;
                            double width = Math.abs(recognition.getRight() - recognition.getLeft());
                            double height = Math.abs(recognition.getTop() - recognition.getBottom());

                            telemetry.addData("", " ");
                            telemetry.addData("Image", "%s (%.0f %% Conf.)", recognition.getLabel(), recognition.getConfidence() * 100);
                            telemetry.addData("- Position (Row/Col)", "%.0f / %.0f", row, col);
                            telemetry.addData("- Size (Width/Height)", "%.0f / %.0f", width, height);
                        }
                        telemetry.update();
                        if (updatedRecognitions.size() > 0 && !hasMoved) {
                            moveToZone(updatedRecognitions.get(0).getLabel(), count);
                            hasMoved = true;
                        }
                    }
                }
            }
        }
    }

    /**
     * Initialize the Vuforia localization engine.
     */

    /* Change this function completely:
     *
     * Using DcMotorEx function, convert tps from strafeVelo into rpm, then use physics stuff to
     * get distance travelled (make sure to measure radius of current wheels that are being used),
     * then multiply by the count variable to get total distance. Convert that distance into time
     * by converting the tps being used in the moveToZone function into rpm, then using more physics
     * equations to get time. Input that time variable into the F() function, and either subtract
     * or add to the time it would need to be on for to move to the correction position.
     *
     * The functions that set the power for the motors also need to be changed to the .setVelocity()
     * functions that were recently added to make this work correctly.
     */

    public void moveToZone(String signal, int count){
        telemetry.addData("Detected:",signal);
        double timeAdjustment = getDistance(radius,rpm,.5)*count; // get time by looking at strafe command in runOpMode()
        if(signal.equals("1 Bolt")){ // go to location 1 (left and forward)
            setVelo(true,.75,2);
            turnNinety(false);
            setVelo(true,.75,2);
        }

        if(signal.equals("2 Bulb")){ // go to location 2 (return to start and forward)
            setVelo(true,.75,2);
        }

        if(signal.equals("3 Panel")){ // go to location 3 (right and forward)
            setVelo(true,.75,2);
            turnNinety(true);
            setVelo(true,.75,2);
        }
    }


    public void setUpHardware() { // Assigns motor names in phone to the objects in code
        leftDrive  = hardwareMap.get(DcMotorEx.class, "left_front_drive");
        leftBackDrive  = hardwareMap.get(DcMotorEx.class, "left_back_drive");
        rightDrive = hardwareMap.get(DcMotorEx.class, "right_front_drive");
        rightBackDrive = hardwareMap.get(DcMotorEx.class, "right_back_drive");
        // Makes all motors go forward, if they don't, switch this stuff
        leftDrive.setDirection(DcMotor.Direction.REVERSE);
        leftBackDrive.setDirection(DcMotor.Direction.REVERSE);
        rightDrive.setDirection(DcMotor.Direction.FORWARD);
        rightBackDrive.setDirection(DcMotor.Direction.FORWARD);
    }


    private void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraName = hardwareMap.get(WebcamName.class, "Webcam 1");

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);
    }

    /**
     * Initialize the TensorFlow Object Detection engine.
     */
    private void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.75f;
        tfodParameters.isModelTensorFlow2 = true;
        tfodParameters.inputSize = 300;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);

        // Use loadModelFromAsset() if the TF Model is built in as an asset by Android Studio
        // Use loadModelFromFile() if you have downloaded a custom team model to the Robot Controller's FLASH.
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABELS);
        // tfod.loadModelFromFile(TFOD_MODEL_FILE, LABELS);
    }

    //Drive functions
    public void setVelo(boolean forward, double maxPercent, double time){ // Move forward or backward
        int direction = -1;
        if(forward){
            direction = 1;
        }
        runtime.reset();
        while(opModeIsActive() && runtime.seconds() < time){
            leftVelo(maxPercent*direction);
            rightVelo(maxPercent*direction);
        }
        if(runtime.seconds() >= time){
            motorsOff();
        }
    }

    public void strafeVelo(boolean isLeft, double maxPercent, double time){
        //Strafe left or right
        int direction = -1;
        if(isLeft){
            direction = 1;
        }
        runtime.reset();
        while(opModeIsActive() && runtime.seconds() < time){
            leftWheel(maxPercent * direction);
            rightWheel(maxPercent * direction * -1);
            leftBackWheel(maxPercent * direction * -1);
            rightBackWheel(maxPercent * direction);
        }
        if(runtime.seconds() >= time){
            motorsOff();
        }
    }

    public void turnNinety(boolean CW){
        // Turns 90 degrees either clockwise or counter clockwise, depending on value of CW
        BNO055IMU imu = hardwareMap.get(BNO055IMU.class, "imu");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        // Technically this is the default, however specifying it is clearer
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        // Without this, data retrieving from the IMU throws an exception
        imu.initialize(parameters);

        double originalAngle = -imu.getAngularOrientation().firstAngle + 1.80;

        double time = .8;
        runtime.reset();

        if(CW){
            while(opModeIsActive() && runtime.seconds() < time){
                leftVelo(.75);
                rightVelo(-.75);
            }
        }else{
            while(opModeIsActive() && runtime.seconds() < time){
                leftVelo(-.75);
                rightVelo(.75);
            }
        }
        if(time >= runtime.seconds()){
            motorsOff();
        }

        /*if(CW){
            //left = +; right = -
            while(opModeIsActive() && -imu.getAngularOrientation().firstAngle + 1.80 > originalAngle - .9) {
                leftVelo(.75);
                rightVelo(-.75);
            }
        }else{
            //left = -; right = +
            while(opModeIsActive() && -imu.getAngularOrientation().firstAngle + 1.80 < originalAngle + .9) {
                leftVelo(-.75);
                rightVelo(.75);
            }
        }
        motorsOff();*/
    }

    public void turnOneEighty(){
        turnNinety(true);
        turnNinety(true);
    }

    public void moveOneFoot(boolean forward){
        //using motor encoders
        double oneRotationDistance = 10 * Math.PI; // In cm
        double ticksPerRotation = 537.6;

        double rotationAmount = oneFootCm / oneRotationDistance;
        int totalTicks = (int) (rotationAmount * ticksPerRotation);

        resetEncoders();

        if(forward){
            encoderTarget(totalTicks);
        }else{
            encoderTarget(-totalTicks);
        }
        leftDrive.setPower(.5);
        leftBackDrive.setPower(.5);
        rightDrive.setPower(.5);
        rightBackDrive.setPower(.5);
        while(opModeIsActive() && leftDrive.getCurrentPosition() > leftDrive.getTargetPosition()){
            telemetry.addData("Left encoder", leftDrive.getCurrentPosition() + "  busy=" + leftDrive.isBusy());
            telemetry.addData("Right encoder", rightDrive.getCurrentPosition() + "  busy=" + rightDrive.isBusy());
            telemetry.update();
            idle();
        }
        motorsOff();
        resetEncoders();
    }

    public void moveTwoFeet(boolean forward){
        if(forward){
            moveOneFoot(true);
            moveOneFoot(true);
        }else{
            moveOneFoot(false);
            moveOneFoot(false);
        }
    }

    public void leftVelo(double maxPercent){ //sets power for left wheels
        leftWheel(maxPercent);
        leftBackWheel(maxPercent);
    }

    public void rightVelo(double maxPercent){ //sets power for right wheels
        rightWheel(maxPercent);
        rightBackWheel(maxPercent);
    }

    public void leftWheel(double percent){
        leftDrive.setPower(percent);
    }
    public void rightWheel(double percent){
        rightDrive.setPower(percent);
    }
    public void leftBackWheel(double percent){
        leftBackDrive.setPower(percent);
    }
    public void rightBackWheel(double percent){
        rightBackDrive.setPower(percent);
    }


    //Primitive functions

    public void waitTime(double time){ // Waits for time (seconds)
        runtime.reset();
        while(opModeIsActive() && runtime.seconds()<time){
        }
    }

    public void motorsOff(){ // Turns all motors off
        leftDrive.setPower(0);
        leftBackDrive.setPower(0);
        rightDrive.setPower(0);
        rightBackDrive.setPower(0);
    }

    public void resetEncoders() { // Reset all encoder positions
        leftDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        leftDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        leftBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightBackDrive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
    }

    public void encoderTarget(int target){
        leftDrive.setTargetPosition(target);
        leftBackDrive.setTargetPosition(target);
        rightDrive.setTargetPosition(target);
        rightBackDrive.setTargetPosition(target);
    }

    // Some physics equations put into functions
    public static double getVelo(double radius, double rpm){ // in m/s in theory; v = vangular * r
        return ((rpm/60)*Math.PI)*radius;
    }

    public static double getDistance(double radius, double rpm, double time){ //whatever unit radius is in; x = vt
        return getVelo(radius,rpm)*time;
    }
}