/**
 * Top-level build file for ftc_app project.
 *
 * It is extraordinarily rare that you will ever need to edit this file.
 */

<<<<<<< HEAD
=======
configurations {
    doc { transitive false }
}

>>>>>>> drive
buildscript {
    repositories {
        mavenCentral()
        google()
        // jcenter()  // Needed for tensorflow-lite
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
    }
}

<<<<<<< HEAD
plugins {
    id 'idea' // optional (to generate IntelliJ IDEA project files)
}

configurations {
    doc { transitive false }
}

=======
>>>>>>> drive
// This is now required because aapt2 has to be downloaded from the
// google() repository beginning with version 3.2 of the Android Gradle Plugin
allprojects {
    repositories {
        mavenCentral()
        google()
<<<<<<< HEAD
=======
        // jcenter()  // Needed for tensorflow-lite
>>>>>>> drive
    }
}

repositories {
    mavenCentral()

    flatDir {
        dirs '../libs'
    }
}

<<<<<<< HEAD

dependencies {
    doc('org.firstinspires.ftc:Hardware:7.0.0')
    doc('org.firstinspires.ftc:RobotCore:7.0.0')
    doc('org.firstinspires.ftc:FtcCommon:7.0.0')
    doc('org.firstinspires.ftc:OnBotJava:7.0.0')
    doc('org.firstinspires.ftc:Inspection:7.0.0')
=======
dependencies {
    doc 'org.firstinspires.ftc:Hardware:7.0.0'
    doc 'org.firstinspires.ftc:RobotCore:7.0.0'
    doc 'org.firstinspires.ftc:FtcCommon:7.0.0'
    doc 'org.firstinspires.ftc:OnBotJava:7.0.0'
    doc 'org.firstinspires.ftc:Inspection:7.0.0'
>>>>>>> drive
}

task extractJavadoc {
    doLast {
        def componentIds = configurations.doc.incoming.resolutionResult.allDependencies.collect { it.selected.id }

        def result = dependencies.createArtifactResolutionQuery()
                .forComponents(componentIds)
                .withArtifacts(JvmLibrary, SourcesArtifact, JavadocArtifact)
                .execute()

        for (component in result.resolvedComponents) {
            component.getArtifacts(JavadocArtifact).each { artifact ->
                def version = artifact.identifier.componentIdentifier.version
                def libName = artifact.identifier.componentIdentifier.moduleIdentifier.name
                copy {
                    from zipTree(artifact.file)
                    into "docs/$version/$libName/"
                }
            }
        }
    }
}
<<<<<<< HEAD
=======

>>>>>>> drive
