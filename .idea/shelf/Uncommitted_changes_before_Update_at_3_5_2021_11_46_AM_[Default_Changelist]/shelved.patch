Index: TeamCode/src/main/assets/labels.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>0 Quad\r\n1 Single\r\n2 None
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/assets/labels.txt	(revision a766034e819af27a2079f9280c15359bd6575a87)
+++ TeamCode/src/main/assets/labels.txt	(date 1614962758042)
@@ -1,3 +1,5 @@
 0 Quad
 1 Single
-2 None
\ No newline at end of file
+2 None
+
+//a
\ No newline at end of file
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/skills/RingDetector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.skills;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.hardware.HardwareMap;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.Telemetry;\r\nimport org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;\r\nimport org.firstinspires.ftc.teamcode.autonomous.AutoRoute;\r\nimport org.firstinspires.ftc.teamcode.tfrec.Detector;\r\nimport org.firstinspires.ftc.teamcode.tfrec.classification.Classifier;\r\nimport org.firstinspires.ftc.teamcode.autonomous.AutoDot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class RingDetector implements Runnable{\r\n    Telemetry telemetry;\r\n    private Detector tfDetector = null;\r\n    private HardwareMap hardwareMap;\r\n    private Led lights;\r\n\r\n    private boolean isRunning = true;\r\n\r\n    private AutoDot recogZone = null;\r\n\r\n    private static String MODEL_FILE_NAME = \"croppedRingRec.tflite\";//\"rings_float.tflite\";\r\n    private static String LABEL_FILE_NAME = \"croppedLabels.txt\";//\"labels.txt\";\r\n    private static Classifier.Model MODEl_TYPE = Classifier.Model.FLOAT_EFFICIENTNET;\r\n    private static final String LABEL_A = \"None\";\r\n    private static final String LABEL_B = \"Single\";\r\n    private static final String LABEL_C = \"Quad\";\r\n    // default zone\r\n    private String targetZone = LABEL_B;\r\n\r\n    private String side = AutoRoute.NAME_RED;\r\n    private LinearOpMode caller = null;\r\n\r\n    private ArrayList<AutoDot> namedCoordinates = new ArrayList<>();\r\n\r\n    private static AutoDot zoneA = new AutoDot(\"A\", 75, 75, -1, AutoRoute.NAME_RED);\r\n    private static AutoDot zoneB = new AutoDot(\"B\", 65, 100, -1, AutoRoute.NAME_RED);\r\n    private static AutoDot zoneC = new AutoDot(\"C\", 75, 120, -1, AutoRoute.NAME_RED);\r\n\r\n    public RingDetector(HardwareMap hMap, String side, LinearOpMode caller, ArrayList<AutoDot> namedCoordinates, Led led, Telemetry t) throws Exception {\r\n        hardwareMap = hMap;\r\n        telemetry = t;\r\n        lights = led;\r\n        initDetector();\r\n        activateDetector();\r\n        this.side = side;\r\n        this.caller = caller;\r\n        if (namedCoordinates != null) {\r\n            this.namedCoordinates = namedCoordinates;\r\n        }\r\n        configZones(side);\r\n    }\r\n\r\n    protected void configZones(String side){\r\n        if (this.namedCoordinates.size() > 0){\r\n            for(AutoDot d : namedCoordinates){\r\n                if (d.getFieldSide().equals(this.side)) {\r\n                    if (d.getFieldSide().equals(side)) {\r\n                        if (d.getDotName().equals(\"A\")) {\r\n                            zoneA = d;\r\n                        } else if (d.getDotName().equals(\"B\")) {\r\n                            zoneB = d;\r\n                        } else if (d.getDotName().equals(\"C\")) {\r\n                            zoneC = d;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public AutoDot detectRing(int timeout, String side, Telemetry telemetry, LinearOpMode caller) {\r\n        configZones(side);\r\n        AutoDot zone = zoneB;\r\n\r\n        ElapsedTime runtime = new ElapsedTime();\r\n        runtime.reset();\r\n        boolean fromConfig = this.namedCoordinates.size() > 0;\r\n        while (runtime.seconds() <= timeout) {\r\n            telemetry.addData(\"this.namedCoordinates.size() > 0\", fromConfig);\r\n            if (tfDetector != null) {\r\n                List<Classifier.Recognition> results = tfDetector.getLastResults();\r\n                if (results == null || results.size() == 0) {\r\n                    telemetry.addData(\"Nada\", \"No results\");\r\n                } else {\r\n                    for (Classifier.Recognition r : results) {\r\n                        if (r.getConfidence() >= 0.8) {\r\n                            telemetry.addData(\"PrintZone\", r.getTitle());\r\n                            if (r.getTitle().contains(LABEL_C)) {\r\n                                zone = zoneC;\r\n                            }\r\n                            else if(r.getTitle().contains(LABEL_B)){\r\n                                zone = zoneB;\r\n                            }\r\n                            else if(r.getTitle().contains(LABEL_A)){\r\n                                zone = zoneA;\r\n                            }\r\n                            targetZone = zone.getDotName();\r\n                            telemetry.addData(\"Zone\", targetZone);\r\n                            telemetry.addData(\"left\", r.getLocation().left);\r\n                            telemetry.addData(\"right\", r.getLocation().right);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            telemetry.update();\r\n        }\r\n\r\n        return zone;\r\n    }\r\n\r\n    public void detectRingThread() {\r\n        this.recogZone = zoneB;\r\n\r\n        ElapsedTime runtime = new ElapsedTime();\r\n        runtime.reset();\r\n        boolean fromConfig = this.namedCoordinates.size() > 0;\r\n        while (isRunning) {\r\n            telemetry.addData(\"this.namedCoordinates.size() > 0\", fromConfig);\r\n            if (tfDetector != null) {\r\n                List<Classifier.Recognition> results = tfDetector.getLastResults();\r\n                if (results == null || results.size() == 0) {\r\n                    telemetry.addData(\"Nada\", \"No results\");\r\n                } else {\r\n                    for (Classifier.Recognition r : results) {\r\n                        if (r.getConfidence() >= 0.8) {\r\n                            telemetry.addData(\"PrintZone\", r.getTitle());\r\n                            if (r.getTitle().contains(LABEL_C)) {\r\n                                this.recogZone = zoneC;\r\n                            }\r\n                            else if(r.getTitle().contains(LABEL_B)){\r\n                                this.recogZone = zoneB;\r\n                            }\r\n                            else if(r.getTitle().contains(LABEL_A)){\r\n                                this.recogZone = zoneA;\r\n                            }\r\n                            targetZone = this.recogZone.getDotName();\r\n                            telemetry.addData(\"Zone\", targetZone);\r\n                            telemetry.addData(\"left\", r.getLocation().left);\r\n                            telemetry.addData(\"right\", r.getLocation().right);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            telemetry.update();\r\n        }\r\n\r\n    }\r\n\r\n    public void displayLights() {\r\n        switch (targetZone) {\r\n            case \"C\":\r\n                this.lights.blue();\r\n                break;\r\n            case \"B\":\r\n                this.lights.orange();\r\n                break;\r\n            case \"A\":\r\n                this.lights.pink();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public void initDetector() throws Exception {\r\n        tfDetector = new Detector(MODEl_TYPE, MODEL_FILE_NAME, LABEL_FILE_NAME, hardwareMap.appContext, telemetry);\r\n    }\r\n\r\n    protected void activateDetector() throws Exception {\r\n        if (tfDetector != null) {\r\n            tfDetector.activate();\r\n        }\r\n        telemetry.addData(\"Info\", \"TF Activated\");\r\n    }\r\n\r\n    public String returnZone() {\r\n        return targetZone;\r\n    }\r\n\r\n    public void stopDetection() {\r\n        stopThread();\r\n        if (tfDetector != null) {\r\n            tfDetector.stopProcessing();\r\n        }\r\n        tfDetector = null;\r\n    }\r\n\r\n    public void stopThread() {\r\n        isRunning = false;\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        while(isRunning) {\r\n            detectRingThread();\r\n        }\r\n    }\r\n\r\n    public AutoDot getRecogZone() {\r\n        return recogZone;\r\n    }\r\n\r\n    public void setRecogZone(AutoDot recogZone) {\r\n        this.recogZone = recogZone;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/skills/RingDetector.java	(revision a766034e819af27a2079f9280c15359bd6575a87)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/skills/RingDetector.java	(date 1614962647043)
@@ -23,7 +23,7 @@
     private boolean isRunning = true;
 
     private AutoDot recogZone = null;
-
+//a
     private static String MODEL_FILE_NAME = "croppedRingRec.tflite";//"rings_float.tflite";
     private static String LABEL_FILE_NAME = "croppedLabels.txt";//"labels.txt";
     private static Classifier.Model MODEl_TYPE = Classifier.Model.FLOAT_EFFICIENTNET;
