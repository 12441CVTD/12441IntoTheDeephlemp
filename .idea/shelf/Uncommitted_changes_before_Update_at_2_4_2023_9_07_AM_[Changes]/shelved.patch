Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/LiTDrive.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.DcMotorSimple;\r\nimport com.qualcomm.robotcore.hardware.Gamepad;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\nimport com.qualcomm.robotcore.hardware.TouchSensor;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\nimport com.qualcomm.robotcore.util.Range;\r\n\r\n@TeleOp(name = \"LiT Drive Program 2022\", group = \"Linear Opmode\")\r\n\r\npublic class LiTDrive extends LinearOpMode {\r\n\r\n    // Declare OpMode members.\r\n    private final ElapsedTime runtime = new ElapsedTime();\r\n    TouchSensor touchSensor;\r\n    private DcMotor frontLeftMotor = null;\r\n    private DcMotor frontRightMotor = null;\r\n    private DcMotor backLeftMotor = null;\r\n    private DcMotor backRightMotor = null;\r\n    private Servo clawServo = null;\r\n    private Servo twistServo = null;\r\n    private DcMotor elevatorMotor = null;\r\n    private DcMotor armMotor = null;\r\n\r\n    boolean clawToggle = false;\r\n    boolean rotateToggle = false;\r\n\r\n    final double CLAW_OPEN = 0.3;\r\n    final double CLAW_CLOSE = 0;\r\n    final double CLAW_ROTATE_UP = 0.73;\r\n    final double CLAW_ROTATE_DOWN = 0;\r\n    \r\n    double armPivotSpeed = 0.75;\r\n\r\n\r\n    public void runOpMode() {\r\n\r\n        Gamepad currentGamepad2 = new Gamepad();\r\n        Gamepad previousGamepad2 = new Gamepad();\r\n\r\n        frontRightMotor = hardwareMap.get(DcMotor.class, \"frontRightMotor\");\r\n        frontLeftMotor = hardwareMap.get(DcMotor.class, \"frontLeftMotor\");\r\n        backRightMotor = hardwareMap.get(DcMotor.class, \"backRightMotor\");\r\n        backLeftMotor = hardwareMap.get(DcMotor.class, \"backLeftMotor\");\r\n        clawServo = hardwareMap.get(Servo.class, \"Servo\");\r\n        twistServo = hardwareMap.get(Servo.class, \"twist\");\r\n        elevatorMotor = hardwareMap.get(DcMotor.class, \"elevatorMotor\"); //1\r\n        armMotor = hardwareMap.get(DcMotor.class, \"armMotor\"); //0\r\n        touchSensor = hardwareMap.get(TouchSensor.class, \"touchSensor\");\r\n\r\n        backLeftMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        backRightMotor.setDirection(DcMotor.Direction.FORWARD);\r\n        frontLeftMotor.setDirection(DcMotor.Direction.REVERSE);\r\n        frontRightMotor.setDirection(DcMotor.Direction.FORWARD);\r\n        armMotor.setDirection(DcMotor.Direction.FORWARD);\r\n        elevatorMotor.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        // wait for the game to start (driver presses PLAY)\r\n        waitForStart();\r\n        runtime.reset();\r\n\r\n        // run until the end of the match (driver presses STOP)\r\n        while (opModeIsActive()) {\r\n            Toggle(currentGamepad2, previousGamepad2);\r\n            Claw();\r\n            RotateClaw();\r\n            Drive();\r\n            Elevator();\r\n            ArmPivot();\r\n        }\r\n\r\n    }\r\n\r\n    public void Toggle(Gamepad currentGamepad2, Gamepad previousGamepad2){\r\n        try {\r\n            previousGamepad2.copy(currentGamepad2);\r\n            currentGamepad2.copy(gamepad2);\r\n        } catch (Exception e) {\r\n            // e.printStackTrace();\r\n        }\r\n\r\n        if (currentGamepad2.a && !previousGamepad2.a) {\r\n            clawToggle = !clawToggle;\r\n        }\r\n        if (currentGamepad2.b && !previousGamepad2.b) {\r\n            rotateToggle = !rotateToggle;\r\n        }\r\n    }\r\n\r\n    public void Claw() {\r\n        if (clawToggle) {\r\n            clawServo.setPosition(CLAW_CLOSE);\r\n        }\r\n        else {\r\n            clawServo.setPosition(CLAW_OPEN);\r\n        }\r\n\r\n        if (touchSensor.isPressed()) {\r\n            clawServo.setPosition(CLAW_CLOSE);\r\n        }\r\n    }\r\n\r\n    public void RotateClaw() {\r\n        if (rotateToggle) {\r\n            twistServo.setPosition(CLAW_ROTATE_UP);\r\n        }\r\n        else {\r\n            twistServo.setPosition(CLAW_ROTATE_DOWN);\r\n        }\r\n    }\r\n\r\n    public  void Drive() {\r\n        // DRIVE CODE\r\n\r\n        //MECANUM\r\n        double drive = gamepad1.left_stick_y;\r\n        double turn = -gamepad1.right_stick_x;\r\n        double strafe = -gamepad1.left_stick_x;\r\n\r\n        // STRAFING\r\n        double FL = Range.clip(drive + strafe + turn, -0.5, 0.5);\r\n        double FR = Range.clip(drive - strafe + turn, -0.5, 0.5);\r\n        double BL = Range.clip(drive - strafe - turn, -0.5, 0.5);\r\n        double BR = Range.clip(drive + strafe - turn, -0.5, 0.5);\r\n\r\n        double QJSpeed = 1.75;\r\n        double sniperPercent = 0.25;\r\n\r\n        // DRIVE SYSTEM\r\n        // SNIPER MODE\r\n        if (gamepad1.left_trigger > 0) {\r\n            frontLeftMotor.setPower(FL * QJSpeed * sniperPercent);\r\n            frontRightMotor.setPower(FR * QJSpeed * sniperPercent);\r\n            backLeftMotor.setPower(BL * QJSpeed * sniperPercent);\r\n            backRightMotor.setPower(BR * QJSpeed * sniperPercent);\r\n        }\r\n\r\n        // BRAKES\r\n        else if (gamepad1.right_trigger > 0) {\r\n            frontLeftMotor.setPower(FL * 0);\r\n            frontRightMotor.setPower(FR * 0);\r\n            backLeftMotor.setPower(BL * 0);\r\n            backRightMotor.setPower(BR * 0);\r\n\r\n        }\r\n        // NORMAL DRIVE\r\n        else {\r\n            frontLeftMotor.setPower(FL * QJSpeed);\r\n            frontRightMotor.setPower(FR * QJSpeed);\r\n            backLeftMotor.setPower(BL * QJSpeed);\r\n            backRightMotor.setPower(BR * QJSpeed);\r\n        }\r\n    }\r\n\r\n    public void Elevator() {\r\n        // move the slides\r\n        // down\r\n        if (gamepad2.right_stick_y > 0.25) {\r\n            elevatorMotor.setPower(-0.45);\r\n        }\r\n        // up\r\n        else if (gamepad2.right_stick_y < -0.25) {\r\n            elevatorMotor.setPower(0.45);\r\n        }\r\n        else {\r\n            elevatorMotor.setPower(0);\r\n        }\r\n    }\r\n\r\n    public void ArmPivot() {\r\n        double armPower = -gamepad2.left_stick_y;\r\n        armMotor.setPower(armPower * armPivotSpeed);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/LiTDrive.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/LiTDrive.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/LiTDrive.java	(revision 549fa48ffd7922e0cdd6c3074a137269d6976af4)
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/LiTDrive.java	(date 1675523227297)
@@ -31,11 +31,10 @@
 
     final double CLAW_OPEN = 0.3;
     final double CLAW_CLOSE = 0;
-    final double CLAW_ROTATE_UP = 0.73;
-    final double CLAW_ROTATE_DOWN = 0;
-    
-    double armPivotSpeed = 0.75;
+    final double CLAW_ROTATE_UP = -3;
+    final double CLAW_ROTATE_DOWN = 3;
 
+    double armPivotSpeed = 0.8;
 
     public void runOpMode() {
 
