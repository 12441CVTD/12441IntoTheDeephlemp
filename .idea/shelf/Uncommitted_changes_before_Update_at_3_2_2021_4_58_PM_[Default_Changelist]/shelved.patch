Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/OpModes/UltimateMode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2017 FIRST. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted (subject to the limitations in the disclaimer below) provided that\r\n * the following conditions are met:\r\n *\r\n * Redistributions of source code must retain the above copyright notice, this list\r\n * of conditions and the following disclaimer.\r\n *\r\n * Redistributions in binary form must reproduce the above copyright notice, this\r\n * list of conditions and the following disclaimer in the documentation and/or\r\n * other materials provided with the distribution.\r\n *\r\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\r\n * promote products derived from this software without specific prior written permission.\r\n *\r\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\r\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage org.firstinspires.ftc.teamcode.OpModes;\r\n\r\nimport android.graphics.Point;\r\n\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.util.ElapsedTime;\r\n\r\nimport org.firstinspires.ftc.teamcode.bots.DummyBot;\r\nimport org.firstinspires.ftc.teamcode.bots.SwingPosition;\r\nimport org.firstinspires.ftc.teamcode.bots.UltimateBot;\r\nimport org.firstinspires.ftc.teamcode.odometry.RobotCoordinatePosition;\r\nimport org.firstinspires.ftc.teamcode.skills.BotThreadAction;\r\nimport org.firstinspires.ftc.teamcode.skills.RingDetector;\r\n\r\n// Main Op Mode\r\n@TeleOp(name = \"Ultimate\", group = \"Robot15173\")\r\npublic class UltimateMode extends LinearOpMode {\r\n\r\n    // Declare OpMode members.\r\n    UltimateBot robot = new UltimateBot();\r\n    private ElapsedTime runtime = new ElapsedTime();\r\n    boolean changedclaw = true;\r\n    boolean changedintake = false;\r\n    boolean changedshooter = false;\r\n    boolean intakeReverse = false;\r\n    boolean buttonpressable = true;\r\n    double delaytime = 200;\r\n    double startdelay = 0;\r\n    double grabdelay = 0;\r\n    private BotThreadAction bta = null;\r\n    Thread btaThread = null;\r\n    RobotCoordinatePosition locator = null;\r\n\r\n    @Override\r\n    public void runOpMode() {\r\n        try {\r\n            try {\r\n                robot.init(this, this.hardwareMap, telemetry);\r\n                robot.setDriveToPowerMode();\r\n            } catch (Exception ex) {\r\n                telemetry.addData(\"Init\", ex.getMessage());\r\n            }\r\n            telemetry.update();\r\n\r\n            locator = new RobotCoordinatePosition(robot, 75);\r\n            locator.reverseHorEncoder();\r\n            Thread positionThread = new Thread(locator);\r\n            positionThread.start();\r\n\r\n            // Wait for the game to start (driver presses PLAY)\r\n            waitForStart();\r\n            runtime.reset();\r\n\r\n            // run until the end of the match (driver presses STOP)\r\n            while (opModeIsActive()) {\r\n                double drive = gamepad1.left_stick_y;\r\n                double turn = 0;\r\n                double ltrigger = gamepad1.left_trigger;\r\n                double rtrigger = gamepad1.right_trigger;\r\n                if (ltrigger > 0) {\r\n                    turn = -ltrigger;\r\n                } else if (rtrigger > 0) {\r\n                    turn = rtrigger;\r\n                }\r\n\r\n                double strafe = gamepad1.right_stick_x;\r\n\r\n                buttonpressable = ((runtime.milliseconds() - startdelay) >= delaytime);\r\n\r\n                if (Math.abs(strafe) > 0) {\r\n                    telemetry.addData(\"Strafing\", \"Left: %2f\", strafe);\r\n                    telemetry.update();\r\n                    if (strafe < 0) {\r\n                        robot.strafeRight(Math.abs(strafe));\r\n                    } else {\r\n                        robot.strafeLeft(Math.abs(strafe));\r\n                    }\r\n                } else {\r\n                    robot.move(drive, turn);\r\n                }\r\n\r\n                // move claw\r\n                if (gamepad1.dpad_right && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    changedclaw = !changedclaw;\r\n                }\r\n\r\n                if (changedclaw) {\r\n                    robot.closeWobbleClaw();\r\n                } else {\r\n                    robot.openWobbleClaw();\r\n                }\r\n\r\n                // move swing thread\r\n//                if (gamepad1.dpad_up) {\r\n//                    bta = new BotThreadAction(robot, telemetry, \"wobbleforward\", this);\r\n//                    btaThread = new Thread(bta);\r\n//                    btaThread.start();\r\n//                } else if (gamepad1.dpad_down) {\r\n//                    bta = new BotThreadAction(robot, telemetry, \"wobbleback\", this);\r\n//                    btaThread = new Thread(bta);\r\n//                    btaThread.start();\r\n//                } else if (gamepad1.dpad_left) {\r\n//                    bta = new BotThreadAction(robot, telemetry, \"wobblewall\", this);\r\n//                    btaThread = new Thread(bta);\r\n//                    btaThread.start();\r\n//                } else if (gamepad1.x && buttonpressable) {\r\n//                    startdelay = runtime.milliseconds();\r\n//                    bta = new BotThreadAction(robot, telemetry, \"wallclose\", this);\r\n//                    btaThread = new Thread(bta);\r\n//                    btaThread.start();\r\n//                    changedclaw = !changedclaw;\r\n//                }\r\n\r\n\r\n                // wobble swing regular\r\n                if (gamepad1.dpad_up && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    robot.forwardWobbleSwing();\r\n                } else if (gamepad1.dpad_down && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    robot.backWobbleSwing();\r\n                } else if (gamepad1.dpad_left) {\r\n                    robot.wobbleLittleUp();\r\n                } else if (gamepad1.x && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    robot.liftWallGrab();\r\n                    changedclaw = !changedclaw;\r\n                }\r\n\r\n                if (gamepad1.y && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    robot.shooterpeg();\r\n                }\r\n\r\n                // move intake\r\n                if (gamepad1.a && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    changedintake = !changedintake;\r\n                }\r\n\r\n                if (changedintake) {\r\n                    robot.intake();\r\n                } else {\r\n                    robot.stopintake();\r\n                }\r\n\r\n                if (gamepad1.b && buttonpressable){\r\n                    startdelay = runtime.milliseconds();\r\n                    intakeReverse = !intakeReverse;\r\n                }\r\n\r\n                if (intakeReverse){\r\n                    robot.intakeReverse();\r\n                }\r\n\r\n                // move shooter\r\n                if (gamepad1.left_bumper && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    changedshooter = !changedshooter;\r\n                }\r\n\r\n                if (changedshooter) {\r\n                    robot.shooter();\r\n                } else {\r\n                    robot.stopshooter();\r\n                }\r\n\r\n                // shoot with servo\r\n                if (gamepad1.right_bumper && buttonpressable) {\r\n                    startdelay = runtime.milliseconds();\r\n                    robot.shootServo();\r\n                }\r\n\r\n                telemetry.addData(\"X \", locator.getXInches() );\r\n                telemetry.addData(\"Y \", locator.getYInches() );\r\n                telemetry.addData(\"Orientation (Degrees)\", locator.getOrientation());\r\n                telemetry.addData(\"Wobble Position\", robot.getWobblePos());\r\n                telemetry.update();\r\n            }\r\n        } catch (Exception ex) {\r\n            telemetry.addData(\"Issues with the OpMode\", ex.getMessage());\r\n            telemetry.update();\r\n            sleep(10000);\r\n        }\r\n        finally {\r\n            robot.stopintake();\r\n            robot.stopshooter();\r\n            if (locator != null){\r\n                locator.stop();\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- TeamCode/src/main/java/org/firstinspires/ftc/teamcode/OpModes/UltimateMode.java	(revision 493c47301a85347d462ce1a6c1c0b770e41372e1)
+++ TeamCode/src/main/java/org/firstinspires/ftc/teamcode/OpModes/UltimateMode.java	(date 1612561837902)
@@ -48,7 +48,7 @@
 
     // Declare OpMode members.
     UltimateBot robot = new UltimateBot();
-    private ElapsedTime runtime = new ElapsedTime();
+    private ElapsedTime runtime = new ElapsedTime();x
     boolean changedclaw = true;
     boolean changedintake = false;
     boolean changedshooter = false;
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1612561837926)
+++ .idea/compiler.xml	(date 1612561837926)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CMakeSettings\">\r\n    <configurations>\r\n      <configuration PROFILE_NAME=\"Debug\" CONFIG_NAME=\"Debug\" />\r\n    </configurations>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 493c47301a85347d462ce1a6c1c0b770e41372e1)
+++ .idea/misc.xml	(date 1612561837936)
@@ -5,7 +5,7 @@
       <configuration PROFILE_NAME="Debug" CONFIG_NAME="Debug" />
     </configurations>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
